// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using NGLBCMS;
using NGLBCMS.Models;

namespace NGLBCMS
{
    public static partial class DestinyExtensions
    {
        /// <param name='operations'>
        /// Reference to the NGLBCMS.IDestiny.
        /// </param>
        /// <param name='apiKey'>
        /// Required. Bungie Provided API KEY
        /// </param>
        /// <param name='membershipId'>
        /// Required. This is a unique number associated with a player's account
        /// </param>
        /// <param name='platform'>
        /// Required. This is the platform the player is on (xbox/psn)
        /// </param>
        public static IList<CharacterSelection> GetCharacters(this IDestiny operations, string apiKey, string membershipId, string platform)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDestiny)s).GetCharactersAsync(apiKey, membershipId, platform);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the NGLBCMS.IDestiny.
        /// </param>
        /// <param name='apiKey'>
        /// Required. Bungie Provided API KEY
        /// </param>
        /// <param name='membershipId'>
        /// Required. This is a unique number associated with a player's account
        /// </param>
        /// <param name='platform'>
        /// Required. This is the platform the player is on (xbox/psn)
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<CharacterSelection>> GetCharactersAsync(this IDestiny operations, string apiKey, string membershipId, string platform, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<NGLBCMS.Models.CharacterSelection>> result = await operations.GetCharactersWithOperationResponseAsync(apiKey, membershipId, platform, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the NGLBCMS.IDestiny.
        /// </param>
        /// <param name='apiKey'>
        /// Required. Bungie Provided API KEY
        /// </param>
        public static DailyWeeklyFinderContentResult GetDailyWeeklyFinderContent(this IDestiny operations, string apiKey)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDestiny)s).GetDailyWeeklyFinderContentAsync(apiKey);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the NGLBCMS.IDestiny.
        /// </param>
        /// <param name='apiKey'>
        /// Required. Bungie Provided API KEY
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<DailyWeeklyFinderContentResult> GetDailyWeeklyFinderContentAsync(this IDestiny operations, string apiKey, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<NGLBCMS.Models.DailyWeeklyFinderContentResult> result = await operations.GetDailyWeeklyFinderContentWithOperationResponseAsync(apiKey, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the NGLBCMS.IDestiny.
        /// </param>
        /// <param name='apiKey'>
        /// Required. Bungie Provided API KEY
        /// </param>
        /// <param name='player'>
        /// Required. Gamertag (platform independent)
        /// </param>
        public static IList<SearchPlayerResult> SearchPlayer(this IDestiny operations, string apiKey, string player)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDestiny)s).SearchPlayerAsync(apiKey, player);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the NGLBCMS.IDestiny.
        /// </param>
        /// <param name='apiKey'>
        /// Required. Bungie Provided API KEY
        /// </param>
        /// <param name='player'>
        /// Required. Gamertag (platform independent)
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<SearchPlayerResult>> SearchPlayerAsync(this IDestiny operations, string apiKey, string player, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<NGLBCMS.Models.SearchPlayerResult>> result = await operations.SearchPlayerWithOperationResponseAsync(apiKey, player, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
